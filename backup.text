#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <iostream>

// settings
const unsigned int SCR_WIDTH = 1280;
const unsigned int SCR_HEIGHT = 720;

const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"void main()\n"
"{\n"
"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n"
"}\0";

const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"void main()\n"
"{\n"
"   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n"
"}\n\0";


// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    std::cout << "resize window called" << std::endl;
    glViewport(0, 0, width, height);
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
}

int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3); //OpenGL Version 3.3
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); //Use CORE profile of OpenGL (Modern profile with deprecated features removed)

    // glfw window creation
    // --------------------
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "LearnOpenGL", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // glad: load all OpenGL function pointers (Initialize GLAD)
    // ---------------------------------------
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }

    //Create vertex shader object
    unsigned int vertexShader; //initialize vertex shader reference id
    vertexShader = glCreateShader(GL_VERTEX_SHADER); //Create shader of type GL_VERTEX_SHADER
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL); //Attach shader to shader source code
    glCompileShader(vertexShader); //Compile vertexShader

    //Create fragmentShader object
    unsigned int fragmentShader; //initialize fragment shader reference id
    fragmentShader = glCreateShader(GL_FRAGMENT_SHADER); //Create shader of type GL_FRAGMENT_SHADER
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL); //Attach shader to shader source code
    glCompileShader(fragmentShader); //compile fragmentShader

    //Verify Vertex Shader Compilation.
    int  success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success); //Check compilation success
    glGetShaderInfoLog(vertexShader, 512, NULL, infoLog); //If error message exists, write it to infoLog
    if (!success)
    {
        std::cout << "SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
        return 0;
    }
    else if (success)
    {
        std::cout << "SHADER::VERTEX::COMPILATION_SUCCESS\n" << infoLog <<std::endl;
    }
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success); //Check compilation success
    glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog); //If error message exists, write it to infoLog
    if (!success)
    {
        std::cout << "SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
        return 0;
    }
    else if (success)
    {
        std::cout << "SHADER::FRAGMENT::COMPILATION_SUCCESS\n" << infoLog << std::endl;
    }

    //To use the recently compiled shaders we have to link them to a shader program object and then activate this shader program
    //Links output of vertex shader to input of fragment shader
    unsigned int shaderProgram; //Initialize shaderProgram reference
    shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader); //Attach compiled shader object (vertexShader) to a shader program (shaderProgram)
    glAttachShader(shaderProgram, fragmentShader); //Attach compiled shader object (fragmentShader) to a shader program (shaderProgram)
    glLinkProgram(shaderProgram); //Link the two shaders, order matters. Always attach vertex shader before fragment shader to match rendering pipeline

    //Check for linking success
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
    if (!success) {
        std::cout << "Shader Linking Failed: " << infoLog << std::endl;
        return 0;
    }
    else if (success)
    {
        std::cout << "Shader Linking Success: " << infoLog << std::endl;
    }

    //The vertexShader and fragmentShader shader objects are already linked to the program object. Its ok to delete them.
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    //Triangle Vertices
    /*
    float vertices[] = {
    -0.5f, -0.5f, 0.0f,
     0.5f, -0.5f, 0.0f,
     0.0f,  0.5f, 0.0f
    };*/

    //Rectangle Vertices (USING EBO FOR INDICES)
    float vertices[] = {
     0.5f,  0.5f, 0.0f,  // top right
     0.5f, -0.5f, 0.0f,  // bottom right
    -0.5f, -0.5f, 0.0f,  // bottom left
    -0.5f,  0.5f, 0.0f   // top left 
    };

    unsigned int indices[] = {  // note that we start from 0!
    0, 1, 3,   // first triangle
    1, 2, 3    // second triangle
    };

    //Create a VertexArrayObject
    unsigned int VAO;
    glGenVertexArrays(1, &VAO);
    // 1. bind Vertex Array Object
    glBindVertexArray(VAO);

    //Create a VertexBufferObject (VBO)  
    unsigned int VBO;
    glGenBuffers(1, &VBO); //(Quantity of VBO's, Reference to VBO) One VBO for this triangle.
    glBindBuffer(GL_ARRAY_BUFFER, VBO); //buffer type of a vertex buffer object is GL_ARRAY_BUFFER, bind the newly created buffer to the GL_ARRAY_BUFFER target
    //^ From that point on any buffer calls we make on the GL_ARRAY_BUFFER target will be used to configure the currently bound buffer, which is VBO.
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); //Copy user-defined data into the currently bound buffer. (currently bound buffer is VBO of type GL_ARRAY_BUFFER (This sends vertex data to GPU), //Use STATIC_DRAW because our triangle isnt moving/changing

    //Create EBO
    unsigned int EBO;
    glGenBuffers(1, &EBO);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    //Set our vertex attributes pointers
    unsigned int attribLocation = glGetAttribLocation(shaderProgram, "aPos");
    glEnableVertexAttribArray(attribLocation);
    //Specify how opengl should interpret vertex data (in this case, array of 3 vertices (12 positions), each element being 12 bytes long
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0); //( 0 for position vertex attribute (see vertex shader), size of vertex attribute (3 positions per vertex) so vec3, normalize=false, stride = 12,  start of buffer (void*)0
    glEnableVertexAttribArray(0);

    // render loop
    // -----------
    
    //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE); //Enable this line for wireframe display
    while (!glfwWindowShouldClose(window))
    {
        // input
        // -----
        processInput(window);

        // render (render to back buffer)
        // ------
        glClearColor(0.2f, 0.3f, 0.3f, 1.0f); //sets the clear color for the color buffer
        glClear(GL_COLOR_BUFFER_BIT);//The back buffer currently only contains the color buffer, this clears and updates it with the colour specified by glClearColor.

        //Render Triangle
        // ------
        glUseProgram(shaderProgram);
        glBindVertexArray(VAO); //BIND VAO (at the moment, this step is redundant)
        glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);
        glBindVertexArray(0); //UNBIND VAO (at the moment, this step is redundant)

        // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
        // -------------------------------------------------------------------------------
        glfwSwapBuffers(window);//swap back frame buffer with front frame buffer.
        glfwPollEvents();
    }

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}



